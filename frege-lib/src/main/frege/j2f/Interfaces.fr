module j2f.Interfaces where

native module where {
    public static j2f.interfaces.NumberComparator createComparator(final Func.U<Integer, Func.U<Integer,Boolean>> fn) {
        return new j2f.interfaces.NumberComparator() {
            public boolean isGreaterThan(Integer a, Integer b) {
                return fn.apply(Thunk.<Integer>lazy(a))   -- Partial application
                      .call()                             -- Retrieves Func.U (Lazy#call)
                      .apply(Thunk.<Integer>lazy(b))      -- Partial application
                      .call();                            -- Extract value from Lazy
            }
        };
    }
}

data NumberComparator = mutable native j2f.interfaces.NumberComparator where
    native new Interfaces.createComparator :: (Int -> Int -> Bool) -> IO NumberComparator
    native gt  isGreaterThan               :: NumberComparator -> Int -> Int -> IO Bool
